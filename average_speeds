import pandas as pd
import matplotlib.pyplot as plt

# Ensure your CSV files contain data organized in columns with appropriate headers.
# The column names should be 'EDGE_TIME' for time data and 'SPEED' for speed data.
# Data should be organized in a matrix format, where each row represents a data point.
# The following plots represent averages of speeds at different time intervals.

# Load the data for treatment and control conditions
# Replace 'INSERT_FILE_HERE.csv' with your actual file names
treatment_data = pd.read_csv('INSERT_FILE_HERE.csv')
control_data = pd.read_csv('INSERT_FILE_HERE.csv')

# Convert EDGE_TIME from seconds to hours and add an offset of 25 hours
# Note: Adjust the offset according to your data file
treatment_data['EDGE_TIME'] = treatment_data['EDGE_TIME'] / 3600 + 25
control_data['EDGE_TIME'] = control_data['EDGE_TIME'] / 3600 + 25

# Convert SPEED from microns per second to microns per minute
treatment_data['SPEED'] = treatment_data['SPEED'] * 60
control_data['SPEED'] = control_data['SPEED'] * 60

# Define time intervals (30-minute intervals)
# Note: Adjust the interval size according to your data and desired plot
time_intervals = range(0, int(treatment_data['EDGE_TIME'].max()) + 1, 1)

# Calculate average speed for each time interval for treatment and control
# Note: This loop calculates the mean speed within each time interval for treatment and control
treatment_avg_speed = []
control_avg_speed = []

for interval_start in time_intervals:
    interval_end = interval_start + 0.5
    # Calculate mean speed within each interval for treatment and control
    treatment_avg_speed.append(treatment_data[(treatment_data['EDGE_TIME'] >= interval_start) & 
                                               (treatment_data['EDGE_TIME'] < interval_end)]['SPEED'].mean())
    
    control_avg_speed.append(control_data[(control_data['EDGE_TIME'] >= interval_start) & 
                                           (control_data['EDGE_TIME'] < interval_end)]['SPEED'].mean())
# Optional: Calculate standard deviation for control data
# control_std_speed = control_data.groupby('EDGE_TIME')['SPEED'].std().tolist()

# Plotting
# plt.style.use('dark_background')
plt.figure(figsize=(10, 6))
plt.subplots_adjust(bottom=0.15)  # Adjust bottom margin
plt.plot(time_intervals, treatment_avg_speed, label='Treatment', color='coral', linewidth=5)
plt.plot(time_intervals, control_avg_speed, label='Control', color='teal', linewidth=5)

# Optional: Shade between upper and lower bounds of control data
# plt.fill_between(time_intervals, 
#                  [avg - std for avg, std in zip(control_avg_speed, control_std_speed)], 
#                  [avg + std for avg, std in zip(control_avg_speed, control_std_speed)],
#                  color='teal', alpha=0.2)


plt.xticks(fontsize=22)
plt.yticks(fontsize=22)
plt.xlabel('Time (hours)', fontsize=26)
plt.ylabel('Average Speed (µm/min)', fontsize=26)
plt.title('Average Speed Over Time', fontsize=34)
plt.legend(fontsize=26)
plt.grid(False)
# plt.savefig('PLOT_SPEED.pdf')
plt.show()


# Plotting the speed of one dataset alone
plt.figure(figsize=(10, 6))
plt.subplots_adjust(bottom=0.15)  # Adjust bottom margin

# Calculate average speed for each time interval for treatment data
treatment_avg_speed_alone = []
for interval_start in time_intervals:
    interval_end = interval_start + 0.5
    avg_speed = treatment_data[(treatment_data['EDGE_TIME'] >= interval_start) & 
                               (treatment_data['EDGE_TIME'] < interval_end)]['SPEED'].mean()
    treatment_avg_speed_alone.append(avg_speed)

# Plot the average speed over time for treatment data
plt.plot(time_intervals, treatment_avg_speed_alone, label='Treatment', color='coral', linewidth=2)

# Customize plot appearance
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Time (hours)', fontsize=16)
plt.ylabel('Average Speed (µm/min)', fontsize=16)
plt.title('Average Speed Over Time (Treatment)', fontsize=18)
plt.legend(fontsize=14)
plt.grid(False)

# Show plot
plt.show()
